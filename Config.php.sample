<?php

class Config {
  // Filesystem root of this installation. Include a trailing slash.
  const ROOT = __DIR__ . '/';

  // The concatenation URL_HOST + URL_PREFIX should yield the URL of the home
  // page of your installation.

  // protocol://host[:port] . No trailing slash.
  const URL_HOST = 'http://localhost';

  // URL path relative to URL_HOST. Include a trailing slash.
  const URL_PREFIX = '/dignitas/www/';

  // database connection
  const DB_HOST = 'localhost';
  const DB_DATABASE = 'dignitas';
  const DB_USER = 'root';
  const DB_PASSWORD = '';

  // development mode
  const DEVELOPMENT_MODE = true;

  // allow account creation
  const ALLOW_REGISTRATION = true;

  // allow account creation via invites from moderators
  const ALLOW_INVITES = true;

  // Shared drive (common to all backends). Include a trailing slash.
  const SHARED_DRIVE = '/srv/http/dignitas-shared/';

  // URLs of the database schema and sample data for bootstrapping a new installation
  const DATABASE_SCHEMA_URL = 'https://dignitas.ro/static/database-schema.sql';
  const SAMPLE_DATA_URL = 'https://dignitas.ro/static/sample-data.json';

  // See https://github.com/TeamDignitas/dignitas/wiki/Color-scheme
  const COLOR_SCHEMES = [ 'light', 'dark' ];

  // Allowed MIME type => canonical file extension
  // In particular, we accept .jpg and .jpeg uploads, but canonicalize both to .jpg.
  const MIME_TYPES = [
    'application/pdf' => 'pdf',
    'image/gif' => 'gif',
    'image/jpeg' => 'jpg',
    'image/png' => 'png',
    'image/svg+xml' => 'svg',
    'text/css' => 'css',
    'text/html' => 'html',
    'text/javascript' => 'js',
  ];

  // Extensions for generated thumbnails, when different from the original file.
  const THUMB_EXTENSIONS = [
    'pdf' => 'jpg',
  ];

  // thumbnail geometries
  const THUMB_USER_NAVBAR = '24x24';
  const THUMB_USER_PROFILE = '200';
  const THUMB_ENTITY_AUTOCOMPLETE = '20x20';
  const THUMB_ENTITY_SMALL = '40';
  const THUMB_ENTITY_STATEMENT_LIST = 'x96';
  const THUMB_ENTITY_LARGE = '200';
  const THUMB_INLINE_ATTACHMENT = '200'; // default geometry for inline attachments
  const THUMB_DOMAIN = '16x16';

  // Upload specifications.
  // Values in 'extensions' refer to the MIME types above.
  // Values in 'geometries' are passed to "convert -resize". Refer to [1] for geometry specs.
  // [1] https://www.imagemagick.org/script/command-line-processing.php#geometry
  const UPLOAD_SPECS = [
    // user profile images
    'User' => [
      'extensions' => [ 'gif', 'jpg', 'png', 'svg' ],
      'limit' => 16 << 20, // 16 MB,
      'geometries' => [
        self::THUMB_USER_NAVBAR,
        self::THUMB_USER_PROFILE,
        'full',
      ],
    ],
    // entity profile images
    'Entity' => [
      'extensions' => [ 'gif', 'jpg', 'png', 'svg' ],
      'limit' => 16 << 20, // 16 MB,
      'geometries' => [
        self::THUMB_ENTITY_AUTOCOMPLETE,
        self::THUMB_ENTITY_SMALL,
        self::THUMB_ENTITY_STATEMENT_LIST,
        self::THUMB_ENTITY_LARGE,
        'full',
      ],
    ],
    // uploaded attachments
    'Attachment' => [
      'extensions' => [ 'gif', 'jpg', 'pdf', 'png', 'svg' ],
      'limit' => 64 << 20, // 64 MB,
      'geometries' => [ '100', '200', '300', '400', 'x100', 'x200', 'x300', 'x400', 'full' ],
    ],
    // domain images
    'Domain' => [
      'extensions' => [ 'gif', 'jpg', 'png', 'svg' ],
      'limit' => 1 << 20, // 1 MB,
      'geometries' => [
        self::THUMB_DOMAIN,
      ],
    ],
    // static resources
    'StaticResource' => [
      'extensions' => [ 'css', 'gif', 'html', 'javascript', 'jpg', 'png', 'svg', ],
      'limit' => 10 << 20, // 10 MB,
      // no geometries here -- we won't do any thumbnailing
    ],
  ];

  // logging
  const LOG_FILE = '/var/log/dignitas.log';
  const LOG_LEVEL = LOG_DEBUG;
  const LOG_SQL_QUERIES = false; // at the bottom of the HTML page

  // email info
  const CONTACT_EMAIL = 'test@test.com';
  const SMTP_SERVER = 'tls://your-server.com:587'; // for outgoing emails
  const EMAIL_IDENTITIES = [
    'test@test.com' => [
      'username' => 'test',
      'name' => 'dignitas',
      'password' => '1234',
    ],
  ];

  // localization
  const LOCALES = [
    'en_US.utf8' => 'English',
    'ro_RO.utf8' => 'română',
  ];
  const SELECT2_LOCALES = [
    'ro_RO.utf8' => 'ro',
  ];
  const DEFAULT_LOCALE = 'ro_RO.utf8';

  // When a file cannot be mapped to a URL in the current locale, use this
  // locale instead. This locale should be fully defined in Router::ROUTES for
  // all files and should match the language in which our PHP files are named.
  const DEFAULT_ROUTING_LOCALE = 'en_US.utf8';

  const META_DESCRIPTION = [
    'en_US.utf8' => 'Collaborative fact-checking for Romanian political statements',
    'ro_RO.utf8' => 'Fact-checking colaborativ pentru afirmații politice românești',
  ];

  // result list settings
  const ENTITY_LIST_PAGE_SIZE = 20;
  const STATEMENT_LIST_PAGE_SIZE = 20;

  // Some pages can vary dramatically between installations. Admins can define
  // static resources (HTML, CSS, Javascript) to be included on some key
  // pages. If a section is empty or if the corresponding static resources are
  // not defined, they will not be included. If multiple static resources
  // exist for a given name we load the first match from:
  // - the current user's locale
  // - the 'all locales' version
  // - the version with the lexicographically smallest locale
  const CUSTOM_SECTIONS = [
    // about page
    'about' => [
      'html' => [ 'about.html' ],
    ],
    // side sheet of hints while composing an answer
    'answer-resources' => [
      'html' => [ 'answer-resources.html' ],
    ],
    // contact page
    'contact' => [
      'html' => [ 'contact.html' ],
    ],
    // top of the home page, before the statement list, for anonymous users
    'homepage-top-guest' => [
      'html' => [ 'homepage-top.html' ],
      'css' => [ 'homepage.css' ],
      'js' => [ 'homepage.js' ],
    ],
    // bottom of the home page, after the statement list, for anonymous users
    'homepage-bottom-guest' => [
      'html' => [ 'homepage-bottom.html' ],
    ],
    // top of the home page, before the statement list, for logged in users
    'homepage-top-user' => [
    ],
    // bottom of the home page, after the statement list, for logged in users
    'homepage-bottom-user' => [
    ],
  ];

  // system stuff
  const TMP_DIR = '/tmp/';

  // Review votes necessary for removing or keeping a post.
  const REMOVE_VOTES_NECESSARY = 2;
  const KEEP_VOTES_NECESSARY = 2;

  // Reputation below which posts trigger a review with REASON_NEW_USER.
  const NEW_USER_REPUTATION = 100;

  // Number of unreviewed pending edits a user may have.
  const MAX_PENDING_EDITS = 5;

  // Answers added at least this many days after their Statement trigger a
  // review with REASON_LATE_ANSWER.
  const LATE_ANSWER_DAYS = 30;

  // Posts edited within this many days of their closure/deletion are placed
  // in a reopen queue.
  const EDIT_REOPEN_DAYS = 3;

  // Reputation gains / losses for various events.
  const REP_STATEMENT_UPVOTED = 10;
  const REP_STATEMENT_DOWNVOTED = -2; // when someone downvotes YOUR statement
  const REP_DOWNVOTE_STATEMENT = -1;  // when YOU downvote someone's statement
  const REP_ANSWER_UPVOTED = 10;
  const REP_ANSWER_DOWNVOTED = -2;
  const REP_DOWNVOTE_ANSWER = -1;
  const REP_COMMENT_UPVOTED = 0;
  const REP_COMMENT_DOWNVOTED = 0;
  const REP_DOWNVOTE_COMMENT = 0;
  const REP_VERDICT = 10;             // your statement receives a verdict
  const REP_ANSWER_PROOF = 10;        // your answer is accepted as proof
  const REP_SUGGESTED_EDIT = 2;
  const REP_SPAM_ABUSE = -100;

  // Loyalty settings. Define a set of adjacent intervals going back in time
  // and give points for every day in each interval. In the sample definition,
  //
  // * today's membership is worth 365 points
  // * the previous year is worth 1 point per day
  // * the two years before that are worth 0.5 points per day
  //
  // Thus, if a member moves from party A to party B today, their loyalty to A
  // will be 33% initially and slowly grow to 100% over three years.
  const LOYALTY_INTERVALS = [
    [ 0, 0, 365.0 ],
    [ 1, 365, 1.0 ],
    [ 366, 1095, 0.5 ],
  ];

  // Help pages for various topics. These can be external URLs.
  const HELP_PAGES = [
    'loyalty' => [ // next to the loyalty widget on the entity page
      'en_US.utf8' => 'https://dignitas.ro/help/loyalty',
      'ro_RO.utf8' => 'https://dignitas.ro/ajutor/loialitate',
    ],
    'privileges' => [ // next to the reputation on the user page
      'en_US.utf8' => 'https://dignitas.ro/help/privileges',
      'ro_RO.utf8' => 'https://dignitas.ro/ajutor/privilegii',
    ],
    'search' => [ // on the statement filter form
      'en_US.utf8' => 'https://dignitas.ro/help/search',
      'ro_RO.utf8' => 'https://dignitas.ro/ajutor/cautare',
    ],
    'upload' => [ // for uploaded files inside Markdown fields
      'en_US.utf8' => 'https://dignitas.ro/help/image-upload',
      'ro_RO.utf8' => 'https://dignitas.ro/ajutor/incarcare-imagini',
    ],
    'verdict' => [ // next to the verdict field on the answer form
      'en_US.utf8' => 'https://dignitas.ro/help/verdicts',
      'ro_RO.utf8' => 'https://dignitas.ro/ajutor/verdicte',
    ],
  ];

  // Cache duration for uploaded files and static resources, in seconds.
  // Google's Page Speed Insights recommends one year.
  const CACHE_DURATION = 31536000;

  // Base URL for archived links. Invidual URLs will be appended to this. You
  // should be able to set up an alias in your web server, for example:
  //   Alias "/archive" "/srv/http/dignitas-archive/archive"
  const ARCHIVE_URL = 'http://localhost/archive/';

  // Archiver to use for archiving URLs. Should match a child of lib/Archiver.php.
  const ARCHIVER_CLASS = 'Archiver';

  // Refer to the archiver class for available options.
  const ARCHIVER_OPTIONS = [];

  // ID of the entity_type used to denote persons (ideally you should have at
  // most one of these). This is used in the ClaimReview structure to report
  // authors as persons or organizations.
  const PERSON_ENTITY_TYPE_ID = 1;
}
